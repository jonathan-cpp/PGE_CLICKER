#pragma once

//////////////////////////////////////////////////////////
// Standard Library Headers
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// External Library Headers
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// Project Headers
//////////////////////////////////////////////////////////

#include "ISystem.h"

//////////////////////////////////////////////////////////
// Forward Declarations
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// Constants and Enums
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// Class Declaration
//////////////////////////////////////////////////////////

class CollectorSystem : public ISystem {
public:
    explicit CollectorSystem(entt::registry& registry, olc::PixelGameEngine* pge);
    virtual ~CollectorSystem() = default;

    // Public Functions
    void Update(float deltaTime) override;

    DECLARE_EVENT(CoinPickupEvent, int)
    CoinPickupEvent OnCoinPickupEvent;
    
protected:

    // Protected Functions

private:
    CollectorSystem(const CollectorSystem&) = delete;
    CollectorSystem(CollectorSystem &&) = delete;
    CollectorSystem& operator=(const CollectorSystem&) = delete;
    CollectorSystem&& operator=(CollectorSystem&&) = delete;

private:
    // Private Functions

private:
    // Member Variables

};